import { useState, useRef, useEffect } from "react";

// APIÈÖçÁΩÆ
const API_BASE_URL = "http://localhost:3001/api";

// ÂàÜÊûêÁ±ªÂûãÈÖçÁΩÆ
export const ANALYSIS_TYPES = [
  {
    id: "comprehensive",
    title: "ÂÖ®Èù¢ÂàÜÊûê",
    description: "ÂØπÁÆÄÂéÜËøõË°åÂÖ®Êñπ‰ΩçÂàÜÊûêÔºåÂåÖÊã¨ÊäÄËÉΩÂåπÈÖç„ÄÅÁªèÈ™åËØÑ‰º∞Á≠â",
    icon: "üîç",
  },
  {
    id: "skills",
    title: "ÊäÄËÉΩÂàÜÊûê",
    description: "ÈáçÁÇπÂàÜÊûêÊäÄËÉΩÂåπÈÖçÂ∫¶ÂíåÊäÄËÉΩÂ±ïÁ§∫ÊïàÊûú",
    icon: "üí°",
  },
  {
    id: "experience",
    title: "ÁªèÈ™åÂàÜÊûê",
    description: "Ê∑±Â∫¶ÂàÜÊûêÂ∑•‰ΩúÁªèÈ™åÁöÑÁõ∏ÂÖ≥ÊÄßÂíåÊèèËø∞Ë¥®Èáè",
    icon: "üìà",
  },
  {
    id: "optimization",
    title: "‰ºòÂåñÂª∫ËÆÆ",
    description: "Êèê‰æõÂÖ∑‰ΩìÁöÑÁÆÄÂéÜ‰ºòÂåñÂª∫ËÆÆÂíåÊîπËøõÊñπÊ°à",
    icon: "‚ú®",
  },
];

// Âø´Êç∑ÈóÆÈ¢ò
export const SUGGESTED_QUESTIONS = [
  "ÊàëÁöÑÊäÄËÉΩÊèèËø∞Â¶Ç‰ΩïÊîπËøõÔºü",
  "Â∑•‰ΩúÁªèÈ™åÈÉ®ÂàÜÊúâ‰ªÄ‰πàÈóÆÈ¢òÔºü",
  "Â¶Ç‰ΩïÊèêÈ´òÁÆÄÂéÜÁöÑÁ´û‰∫âÂäõÔºü",
  "ÊïôËÇ≤ËÉåÊôØÈÉ®ÂàÜÈúÄË¶Å‰ºòÂåñÂêóÔºü",
  "Êúâ‰ªÄ‰πàÂÖ∑‰ΩìÁöÑ‰øÆÊîπÂª∫ËÆÆÔºü",
];

export const useResumeAnalysis = () => {
  // Áä∂ÊÄÅÁÆ°ÁêÜ
  const [selectedFile, setSelectedFile] = useState(null);
  const [analysisType, setAnalysisType] = useState("comprehensive");
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [resumeText, setResumeText] = useState("");
  const [conversationHistory, setConversationHistory] = useState([]);
  const [currentMessage, setCurrentMessage] = useState("");
  const [isSending, setIsSending] = useState(false);
  const [initialAnalysis, setInitialAnalysis] = useState(null);
  const [error, setError] = useState(null);

  const messagesEndRef = useRef(null);

  // Ëá™Âä®ÊªöÂä®Âà∞Â∫ïÈÉ®
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [conversationHistory]);

  // Êñá‰ª∂Â§ÑÁêÜ
  const handleFileChange = (event) => {
    const file = event.target.files[0];
    setSelectedFile(file);
    setResumeText("");
    setConversationHistory([]);
    setInitialAnalysis(null);
    setError(null);
  };

  // ÁÆÄÂéÜÂàÜÊûêAPIË∞ÉÁî®
  const analyzeResume = async () => {
    if (!selectedFile) return;

    setIsAnalyzing(true);
    setError(null);

    try {
      const formData = new FormData();
      formData.append("resume", selectedFile);
      formData.append("analysisType", analysisType);

      const response = await fetch(`${API_BASE_URL}/analyze-resume`, {
        method: "POST",
        body: formData,
      });

      const data = await response.json();

      if (data.success) {
        setResumeText(data.originalText);

        // Ëß£ÊûêLLMËøîÂõûÁöÑJSONÁªìÊûú
        let parsedResult;
        try {
          parsedResult = JSON.parse(data.result);
        } catch (e) {
          parsedResult = { analysis: data.result };
        }

        setInitialAnalysis(parsedResult);

        // Ê∑ªÂä†ÂàùÂßãÂàÜÊûêÊ∂àÊÅØÂà∞ÂØπËØùÂéÜÂè≤
        const initialMessage = {
          role: "assistant",
          content: `üìä **ÁÆÄÂéÜÂàÜÊûêÂÆåÊàêÔºÅ**

**Êï¥‰ΩìËØÑÂàÜ**: ${parsedResult.overallScore || "N/A"} / 100
**ÊäÄËÉΩÂåπÈÖçÂ∫¶**: ${parsedResult.skillMatch || "N/A"}
**ÁªèÈ™åÁõ∏ÂÖ≥ÊÄß**: ${parsedResult.experienceRelevance || "N/A"}

**ËØ¶ÁªÜÂàÜÊûê**:
${parsedResult.analysis || "ÂàÜÊûêÂÜÖÂÆπÂä†ËΩΩ‰∏≠..."}

**‰ºòÂåñÂª∫ËÆÆ**:
${parsedResult.suggestions ? parsedResult.suggestions.map((s) => `‚Ä¢ ${s}`).join("\n") : "ÊöÇÊó†ÂÖ∑‰ΩìÂª∫ËÆÆ"}

ÊÇ®ÂèØ‰ª•ÁªßÁª≠ÂêëÊàëÊèêÈóÆÂÖ≥‰∫éÁÆÄÂéÜÁöÑ‰ªª‰ΩïÈóÆÈ¢òÔºåÊàë‰ºö‰∏∫ÊÇ®Êèê‰æõÊõ¥ËØ¶ÁªÜÁöÑÂàÜÊûêÂíåÂª∫ËÆÆÔºÅ`,
        };

        setConversationHistory([initialMessage]);
      } else {
        throw new Error(data.error || "ÂàÜÊûêÂ§±Ë¥•");
      }
    } catch (error) {
      console.error("ÂàÜÊûêÈîôËØØ:", error);
      setError("ÂàÜÊûêÂ§±Ë¥•: " + error.message);
    } finally {
      setIsAnalyzing(false);
    }
  };

  // ÂèëÈÄÅÊ∂àÊÅØAPIË∞ÉÁî®
  const sendMessage = async () => {
    if (!currentMessage.trim() || !resumeText) return;

    const userMessage = {
      role: "user",
      content: currentMessage,
    };

    setConversationHistory((prev) => [...prev, userMessage]);
    setCurrentMessage("");
    setIsSending(true);
    setError(null);

    try {
      const response = await fetch(`${API_BASE_URL}/chat-analysis`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          message: currentMessage,
          resumeText: resumeText,
          conversationHistory: conversationHistory,
        }),
      });

      const data = await response.json();

      if (data.success) {
        const assistantMessage = {
          role: "assistant",
          content: data.response,
        };

        setConversationHistory((prev) => [...prev, assistantMessage]);
      } else {
        throw new Error(data.error || "ÂèëÈÄÅÂ§±Ë¥•");
      }
    } catch (error) {
      console.error("ÂèëÈÄÅÈîôËØØ:", error);
      const errorMessage = {
        role: "assistant",
        content: `‚ùå Êä±Ê≠âÔºåÂèëÈÄÅÊ∂àÊÅØÊó∂Âá∫Áé∞ÈîôËØØ: ${error.message}`,
      };
      setConversationHistory((prev) => [...prev, errorMessage]);
      setError("ÂèëÈÄÅÂ§±Ë¥•: " + error.message);
    } finally {
      setIsSending(false);
    }
  };

  // ÈîÆÁõò‰∫ã‰ª∂Â§ÑÁêÜ
  const handleKeyPress = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  // ÈáçÁΩÆÁä∂ÊÄÅ
  const resetAnalysis = () => {
    setSelectedFile(null);
    setResumeText("");
    setConversationHistory([]);
    setInitialAnalysis(null);
    setCurrentMessage("");
    setError(null);
  };

  return {
    // Áä∂ÊÄÅ
    selectedFile,
    analysisType,
    isAnalyzing,
    resumeText,
    conversationHistory,
    currentMessage,
    isSending,
    initialAnalysis,
    error,
    messagesEndRef,

    // ÊñπÊ≥ï
    setSelectedFile,
    setAnalysisType,
    setCurrentMessage,
    handleFileChange,
    analyzeResume,
    sendMessage,
    handleKeyPress,
    resetAnalysis,
  };
};
